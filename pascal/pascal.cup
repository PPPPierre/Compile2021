import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.util.HashMap;

parser code {:
  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }
:}

action code {:
  // attributes & methods seen from actions
  int count = 0;
  String current_func = "main";

  String make_inst(String lab, String op, String arg) {
    return lab + "\t" + op + "\t" + arg + "\n";
  }

  String make_comm(String comment) {
    return ";/ " + comment + "\n";
  }

  String make_label(String n){
    return "@lab_" + n + "_" + count++;
  }

  String make_pointer(String n){
    return "@pt_" + n + "_" + count++;
  }

  HashMap<String, Boolean> var_map = new HashMap<String, Boolean>();

:}

terminal TK_SEP, TK_PRINT, TK_PLUS, TK_MINUS, TK_TIMES, TK_DIVIDE, TK_OP, TK_CP, TK_LCOMM, 
  TK_DECL, TK_ASSIGN, TK_IN, TK_IF, TK_ELSE, TK_OCURLY, TK_CCURLY, TK_MOD, TK_UMINUS, 
  TK_WHILE, TK_COMMA, TK_OB, TK_CB, TK_MINR, TK_EMINR, TK_GRTR, TK_EGRTR, TK_EQUAL,
  TK_DIFF, TK_AND, TK_OR, TK_NOT, TK_EXIT, TK_PROC, TK_CALL, TK_FUNC, TK_RETURN, TK_GLOBAL;
terminal Integer TK_ICNST, TK_TRUE, TK_FALSE;
terminal String TK_IDENT;

non terminal target;
non terminal String program, linst, inst, print, expr, comment, declaration, assignment, lident, lvar, lexpr, func, ref, ref_dec;

precedence left TK_MINR, TK_EMINR, TK_GRTR, TK_EGRTR, TK_EQUAL, TK_DIFF;
precedence left TK_PLUS, TK_MINUS;
precedence left TK_TIMES, TK_DIVIDE, TK_MOD;
precedence left TK_AND, TK_OR;
precedence left TK_UMINUS, TK_NOT;

start with target;

target ::= program:s {: System.out.println(s); :}
;

program ::= 
  linst:l {: RESULT = l + "\tSTOP\n"; :}
;

linst ::= 
  inst:i 
    {: RESULT = i; :}
  | 
  linst:l inst:i 
    {: RESULT = l + i; :}
;

inst  ::= 
  print:i TK_SEP 
    {: RESULT = i; :}
  |
  declaration:i TK_SEP 
    {: RESULT = i; :}
  |
  assignment:i TK_SEP 
    {: RESULT = i; :}
  |
  comment:i 
    {: RESULT = ""; :}
  |
  TK_IF TK_OP expr:cond TK_CP TK_OCURLY linst:li1 TK_CCURLY TK_ELSE TK_OCURLY linst:li2 TK_CCURLY
    {: 
      String labelse = make_label("else");
      String labfin = make_label("fin");
      RESULT = cond + 
      "\tBEZ\t" + labelse + "\n" + 
      li1 + 
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labelse + "\tEQU\t*\n" + 
      li2 + 
      labfin + "\tEQU\t*\n"; 
    :}
  |
  TK_IF TK_OP expr:cond TK_CP TK_OCURLY linst:li1 TK_CCURLY
    {: 
      String labelse = make_label("else");
      String labfin = make_label("fin");
      RESULT = cond + 
      "\tBEZ\t" + labelse + "\n" + 
      li1 + 
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labelse + "\tEQU\t*\n" + 
      labfin + "\tEQU\t*\n"; 
    :}
  |
  TK_WHILE TK_OP expr:cond TK_CP TK_OCURLY linst:li1 TK_CCURLY
    {: 
      String labcond = make_label("fin");
      String labfin = make_label("fin");
      RESULT = 
        labcond + "\tEQU\t*\n" +
        cond + 
        "\tBEZ\t" + labfin + "\n" + 
        li1 + 
        "\tPUSH\t" + labcond + "\n" + 
        "\tGOTO\n" + 
        labfin + "\tEQU\t*\n"; 
    :}
  |
  TK_PROC func:f TK_OP lvar:lv TK_CP TK_OCURLY linst:li TK_CCURLY
    {: 
      String labfin = make_label("fin");
      RESULT =
        make_inst("", "PUSH", labfin) + 
        make_inst("", "GOTO", "") + 
        make_inst(f, "EQU", "*") + 
        lv +
        li +
        make_inst("", "GOTO", "") + 
        make_inst(labfin, "EQU", "*");
      current_func = "main";
    :}
  |
  TK_PROC func:f TK_OP TK_CP TK_OCURLY linst:li TK_CCURLY
    {: 
      String labfin = make_label("fin");
      RESULT =
        make_inst("", "PUSH", labfin) + 
        make_inst("", "GOTO", "") + 
        make_inst(f, "EQU", "*") + 
        li +
        make_inst("", "GOTO", "") + 
        make_inst(labfin, "EQU", "*");
      current_func = "main";
    :}
  |
  TK_FUNC func:f TK_OP TK_CP TK_OCURLY linst:li TK_CCURLY
    {: 
      String labfin = make_label("fin");
      RESULT =
        make_inst("", "PUSH", labfin) + 
        make_inst("", "GOTO", "") + 
        make_inst(f, "EQU", "*") + 
        li +
        make_inst(labfin, "EQU", "*");
      current_func = "main";
    :}
  |
  TK_FUNC func:f TK_OP lvar:lv TK_CP TK_OCURLY linst:li TK_CCURLY
    {: 
      String labfin = make_label("fin");
      RESULT =
        make_inst("", "PUSH", labfin) + 
        make_inst("", "GOTO", "") + 
        make_inst(f, "EQU", "*") + 
        lv +
        li +
        make_inst(labfin, "EQU", "*");
      current_func = "main";
    :}
  |
  TK_CALL TK_IDENT:f TK_OP TK_CP
    {:
      String lab_back = make_label("back_" + f);
      RESULT = 
        make_inst("", "PUSH", lab_back) +
        make_inst("", "PUSH", f) +
        make_inst("", "GOTO", "") +
        make_inst(lab_back, "EQU", "*");
    :}
  |
  TK_CALL TK_IDENT:f TK_OP lexpr:le TK_CP
    {:
      String lab_back = make_label("back_" + f);
      RESULT = 
        make_inst("", "PUSH", lab_back) +
        le +
        make_inst("", "PUSH", f) +
        make_inst("", "GOTO", "") +
        make_inst(lab_back, "EQU", "*");
    :}
  |
  TK_EXIT TK_OP expr:e TK_CP
    {: RESULT = e + "\tSTOP\n"; :}
  |
  TK_RETURN expr:e TK_SEP
    {: 
      RESULT = 
        e + 
        make_inst("", "SWAP", "") + 
        make_inst("", "GOTO", ""); 
    :}
  |
  TK_SEP 
    {: RESULT = ""; :}
;

print ::= 
  TK_PRINT expr:e
    {:
	    String comment = make_comm("print...");
	    RESULT = comment + e + "\tOUT\n";
    :}
;

declaration ::=
  TK_GLOBAL TK_IDENT:v 
    {:
      RESULT = make_inst(v, "DS", "1"); 
    :}
  |
  TK_DECL ref_dec:v TK_ASSIGN expr:e
    {: 
      RESULT =
        make_inst(v,"DS","1") +
        make_inst("", "PUSH", v) +
        e + 
        make_inst("", "STORE", "");
    :}
  |
  TK_DECL ref_dec:v
    {:
      RESULT = 
        v + "\tDS\t" + "1\n"; 
    :}
  |
  TK_DECL lident:lv
    {: RESULT =  lv; :}
  |
  TK_DECL TK_TIMES ref_dec:v TK_OB TK_ICNST:i TK_CB
    {: RESULT = v + "\tDS\t" + i + "\n"; :}
  |
  TK_DECL ref_dec:v TK_OB TK_ICNST:i TK_CB
    {: 
      RESULT = v + "\tDS\t" + i + "\n";
    :}
;

assignment ::=
  ref:v TK_ASSIGN expr:e
    {: 
      RESULT = 
        "\tPUSH\t" + v + "\n" + e + "\tSTORE\n"; :}
  |
  ref:v TK_OB expr:e1 TK_CB TK_ASSIGN expr:e2
    {: 
      RESULT = 
        "\tPUSH\t" + v + "\n" + 
        e1 +
        "\tADD\n" + 
        e2 +
        "\tSTORE\n"; 
    :}
  |
  ref:v TK_IN
    {: 
      RESULT = 
        "\tPUSH\t" + v + "\n" + 
        "\tIN\n" + 
        "\tSTORE\n"; 
    :}
;

comment ::=
  TK_LCOMM 
    {: RESULT = ""; :}
;

func ::=
  TK_IDENT:f
    {:
      current_func = f;
      RESULT = f;
    :}
;

lexpr ::=
  lexpr:le TK_COMMA expr:e {: RESULT = le + e; :}
  |
  expr:e {: RESULT = e; :}
;

lvar ::=
  lvar:lv TK_COMMA ref_dec:v
    {:
      RESULT =
        lv +
        make_inst(v, "DS", "1") +
        make_inst("", "PUSH", v) +
        make_inst("", "SWAP", "") +
        make_inst("", "STORE", "");
    :}
  |
  ref_dec:v
    {:
      RESULT =
        make_inst(v, "DS", "1") +
        make_inst("", "PUSH", v) +
        make_inst("", "SWAP", "") +
        make_inst("", "STORE", "");
    :}
;

lident ::=
  lident:lv TK_COMMA ref_dec:v
    {: 
      RESULT = 
        lv + 
        make_inst(v, "DS", "1"); 
    :}
  |
  ref_dec:v1 TK_COMMA ref_dec:v2
    {:
      RESULT = 
        make_inst(v1, "DS", "1") +
        make_inst(v2, "DS", "1"); 
    :}
;

ref ::=
  TK_IDENT:v
    {:
      String var_name = current_func + ":" + v;
      if (var_map.containsKey(var_name)){
        RESULT = var_name;
      } else {
        RESULT = v;
      }
    :}
;

ref_dec ::=
  TK_IDENT:v
    {:
      String var_name = current_func + ":" + v;
      var_map.put(var_name, 1);
      RESULT = var_name;
    :}
;

expr ::= 
  TK_ICNST:i 
    {: RESULT = "\tPUSH\t" + i + "\n"; :}
  |
  TK_TRUE:i
    {: RESULT = "\tPUSH\t" + i + "\n"; :}
  |
  TK_FALSE:i
    {: RESULT = "\tPUSH\t" + i + "\n"; :}
  |
  ref:v
    {: 
      RESULT = 
        "\tPUSH\t" + v + "\n" + "\tLOAD\n"; :}
  |
  ref:v TK_OB expr:e TK_CB
    {: 
      RESULT = "\tPUSH\t" + v + "\n" + 
      e +
      "\tADD\n" + 
      "\tLOAD\n"; 
    :}
  |
  TK_IDENT:f TK_OP TK_CP
    {: 
      String lab_back = make_label("back_" + f);
      RESULT = 
        make_inst("", "PUSH", lab_back) +
        make_inst("", "PUSH", f) +
        make_inst("", "GOTO", "") +
        make_inst(lab_back, "EQU", "*");
    :}
  |
  TK_IDENT:f TK_OP lexpr:le TK_CP
    {: 
      String lab_back = make_label("back_" + f);
      RESULT = 
        make_inst("", "PUSH", lab_back) +
        le +
        make_inst("", "PUSH", f) +
        make_inst("", "GOTO", "") +
        make_inst(lab_back, "EQU", "*");
    :}
  |
  TK_TIMES ref:v TK_OB expr:e TK_CB
    {: 
      RESULT = "\tPUSH\t" + v + "\n" + 
      e +
      "\tADD\n" + 
      "\tLOAD\n" +
      "\tLOAD\n";
    :}
  |
  TK_TIMES TK_IDENT:v
    {:
      RESULT = "\tPUSH\t" + v + "\n"; :}
  |
  expr:e1 TK_PLUS expr:e2 
    {: RESULT = e1 + e2 + "\tADD\n"; :}
  |
  expr:e1 TK_MINUS expr:e2 
    {: RESULT = e1 + e2 + "\tSUB\n"; :}
  |
  expr:e1 TK_TIMES expr:e2 
    {: RESULT = e1 + e2 + "\tMUL\n"; :}
  |
  expr:e1 TK_DIVIDE expr:e2 
    {: RESULT = e1 + e2 + "\tDIV\n"; :}
  |
  expr:e1 TK_MOD expr:e2 
    {: 
      RESULT = e1 + 
      e2 + 
      "\tDIV\n" + 
      e2 + 
      "\tMUL\n" + 
      e1 + 
      "\tSWAP\n" + 
      "\tSUB\n"; 
    :}
  |
  expr:e1 TK_AND expr:e2 
    {: RESULT = e1 + e2 + "\tAND\n"; :}
  |
  expr:e1 TK_OR expr:e2 
    {: RESULT = e1 + e2 + "\tOR\n"; :}
  |
  TK_NOT expr:e 
    {: 
    RESULT = e + 
    "\tPUSH\t2\n" +
    "\tSUB\n" +
    "\tNOT\n"; 
    :}
  |
  expr:e1 TK_MINR expr:e2 
    {:
      String labegrtr = make_label("minr");
      String labfin = make_label("minr");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBGZ\t" + labegrtr + "\n" +
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBEZ\t" + labegrtr + "\n" +
      "\tPUSH\t1\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labegrtr + "\tEQU\t*\n" +
      "\tPUSH\t0\n" +
      labfin + "\tEQU\t*\n";    
    :}
  |
  expr:e1 TK_EMINR expr:e2 
    {:
      String labgrtr = make_label("eminr");
      String labfin = make_label("eminr");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBGZ\t" + labgrtr + "\n" +
      "\tPUSH\t1\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labgrtr + "\tEQU\t*\n" +
      "\tPUSH\t0\n" +
      labfin + "\tEQU\t*\n";
    :}
  |
  expr:e1 TK_GRTR expr:e2 
    {:
      String labgrtr = make_label("grtr");
      String labfin = make_label("grtr");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBGZ\t" + labgrtr + "\n" +
      "\tPUSH\t0\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labgrtr + "\tEQU\t*\n" +
      "\tPUSH\t1\n" +
      labfin + "\tEQU\t*\n";  
    :}
  |
  expr:e1 TK_EGRTR expr:e2 
    {:
      String labegrtr = make_label("egrtr");
      String labfin = make_label("egrtr");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBGZ\t" + labegrtr + "\n" +
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBEZ\t" + labegrtr + "\n" +
      "\tPUSH\t0\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labegrtr + "\tEQU\t*\n" +
      "\tPUSH\t1\n" +
      labfin + "\tEQU\t*\n";  
    :}
  |
  expr:e1 TK_EQUAL expr:e2 
    {:
      String labequal = make_label("equal");
      String labfin = make_label("equal");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBEZ\t" + labequal + "\n" +
      "\tPUSH\t0\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labequal + "\tEQU\t*\n" +
      "\tPUSH\t1\n" +
      labfin + "\tEQU\t*\n"; 
    :}
  |
  expr:e1 TK_DIFF expr:e2 
    {: 
      String labequal = make_label("diff");
      String labfin = make_label("diff");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBEZ\t" + labequal + "\n" +
      "\tPUSH\t1\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labequal + "\tEQU\t*\n" +
      "\tPUSH\t0\n" +
      labfin + "\tEQU\t*\n";
    :}
  |
  TK_MINUS expr:e
    {: RESULT = "\tPUSH\t 0\n" + e + "\tSUB\n"; :} 
  %prec TK_UMINUS
  |
  TK_OP expr:e TK_CP 
    {: RESULT = e; :}
;
