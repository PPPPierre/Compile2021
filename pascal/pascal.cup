import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }
:}

action code {:
  // attributes & methods seen from actions
  int count = 0;

  String make_inst(String lab, String op, String arg) {
    return lab + "\t" + op + "\t" + arg + "\n";
  }

  String make_comm(String comment) {
    return ";/ " + comment + "\n";
  }

  String make_label(String n){
    return "@lab_" + n + "_" + count++;
  }

  String make_pointer(String n){
    return "@pt_" + n + "_" + count++;
  }

:}

terminal TK_SEP, TK_PRINT, TK_PLUS, TK_MINUS, TK_TIMES, TK_DIVIDE, TK_OP, TK_CP, TK_LCOMM, TK_DECL, TK_ASSIGN, TK_IN, TK_IF, TK_ELSE, TK_OB, TK_CB, TK_MOD, TK_UMINUS, TK_WHILE, TK_PGCD, TK_COMMA;
terminal Integer TK_ICNST;
terminal String TK_IDENT;

non terminal target;
non terminal String program, linst, inst, print, expr, comment, declaration, assignment;

precedence left TK_PLUS, TK_MINUS;
precedence left TK_TIMES, TK_DIVIDE, TK_MOD;
precedence left TK_UMINUS;

start with target;

target ::= program:s {: System.out.println(s); :}
;

program ::= 
  linst:l {: RESULT = l + "\tSTOP\n"; :}
;

linst ::= 
  inst:i 
    {: RESULT = i; :}
  | 
  linst:l inst:i 
    {: RESULT = l + i; :}
;

inst  ::= 
  print:i TK_SEP 
    {: RESULT = i; :}
  |
  declaration:i TK_SEP 
    {: RESULT = i; :}
  |
  assignment:i TK_SEP 
    {: RESULT = i; :}
  |
  comment:i 
    {: RESULT = ""; :}
  |
  TK_IF TK_OP expr:cond TK_CP TK_OB linst:li1 TK_CB TK_ELSE TK_OB linst:li2 TK_CB
    {: 
      String labelse = make_label("else");
      String labfin = make_label("fin");
      RESULT = cond + 
        "\tBEZ\t" + labelse + "\n" + 
        li1 + 
        "\tPUSH\t" + labfin + "\n" + 
        "\tGOTO\n" + 
        labelse + "\tEQU\t*\n" + 
        li2 + 
        labfin + "\tEQU\t*\n"; 
    :}
  |
  TK_IF TK_OP expr:cond TK_CP TK_OB linst:li1 TK_CB
    {: 
      String labelse = make_label("else");
      String labfin = make_label("fin");
      RESULT = cond + 
        "\tBEZ\t" + labelse + "\n" + 
        li1 + 
        "\tPUSH\t" + labfin + "\n" + 
        "\tGOTO\n" + 
        labelse + "\tEQU\t*\n" + 
        labfin + "\tEQU\t*\n"; 
    :}
  |
  TK_WHILE TK_OP expr:cond TK_CP TK_OB linst:li1 TK_CB
    {: 
      String labcond = make_label("fin");
      String labfin = make_label("fin");
      RESULT = labcond + "\tEQU\t*\n" +
        cond + 
        "\tBEZ\t" + labfin + "\n" + 
        li1 + 
        "\tPUSH\t" + labcond + "\n" + 
        "\tGOTO\n" + 
        labfin + "\tEQU\t*\n"; 
    :}
  |
  TK_SEP 
    {: RESULT = ""; :}
;

comment ::=
  TK_LCOMM 
    {: RESULT = ""; :}
;

declaration ::=
  TK_DECL TK_IDENT:v 
    {: RESULT = v + "\tDS\t" + "1\n"; :}
;

assignment ::=
  TK_IDENT:v TK_ASSIGN expr:e
    {: RESULT = "\tPUSH\t" + v + "\n" + e + "\tSTORE\n"; :}
  |
  TK_IDENT:v TK_IN
    {: RESULT = "\tPUSH\t" + v + "\n" + "\tIN\n" + "\tSTORE\n"; :}
;

print ::= 
  TK_PRINT expr:e
    {:
	    String comment = make_comm("print...");
	    RESULT = comment + e + "\tOUT\n";
    :}
;

expr ::= 
  TK_ICNST:i 
    {: RESULT = "\tPUSH\t" + i + "\n"; :}
  |
  TK_IDENT:v
    {: RESULT = "\tPUSH\t" + v + "\n" + "\tLOAD\n"; :}
  |
  expr:e1 TK_PLUS expr:e2 
    {: RESULT = e1 + e2 + "\tADD\n"; :}
  |
  expr:e1 TK_MINUS expr:e2 
    {: RESULT = e1 + e2 + "\tSUB\n"; :}
  |
  expr:e1 TK_TIMES expr:e2 
    {: RESULT = e1 + e2 + "\tMUL\n"; :}
  |
  expr:e1 TK_DIVIDE expr:e2 
    {: RESULT = e1 + e2 + "\tDIV\n"; :}
  |
  expr:e1 TK_MOD expr:e2 
    {: RESULT = e1 + e2 + "\tDIV\n" + e2 + "\tMUL\n" + e1 + "\tSWAP\n" + "\tSUB\n"; :}
  |
  TK_MINUS expr:e
    {: RESULT = "\tPUSH\t 0\n" + e + "\tSUB\n"; :} 
  %prec TK_UMINUS
  |
  TK_OP expr:e TK_CP 
    {: RESULT = e; :}
  |
  TK_PGCD TK_OP expr:e1 TK_COMMA expr:e2 TK_CP
    {: 
      String lab0 = make_label("pgcd");
      String lab1 = make_label("pgcd");
      String lab2 = make_label("pgcd");
      String pt1 = make_pointer("pgcd");
      String pt2 = make_pointer("pgcd");
      String pt3 = make_pointer("pgcd");
      RESULT = pt1 + "\tDS\t1\n" +
      pt2 + "\tDS\t1\n" + 
      // if e1 > e2 ?
      e1 +
      e2 +
      "\tSUB\n" +
      "\tBGZ\t" + lab0 + "\n" +
      // cas e1 <= e2
      "\tPUSH\t" + pt1 + "\n" + 
      e2 + 
      "\tSTORE\n" +
      "\tPUSH\t" + pt2 + "\n" + 
      e1 + 
      "\tSTORE\n" +
      "\tPUSH\t" + lab1 + "\n" + 
      "\tGOTO\n" + 
      // cas e1 > e2
      lab0 + "\tEQU\t*\n" +
      "\tPUSH\t" + pt1 + "\n" + 
      e1 + 
      "\tSTORE\n" +
      "\tPUSH\t" + pt2 + "\n" + 
      e2 + 
      "\tSTORE\n" +
      // main
      lab1 + "\tEQU\t*\n" + 
      "\tPUSH\t" + pt1 + "\n" + 
      "\tLOAD\n" +
      "\tPUSH\t" + pt2 + "\n" + 
      "\tLOAD\n" +
      // partie modulo
      "\tDIV\n" + 
      "\tPUSH\t" + pt2 + "\n" + 
      "\tLOAD\n" +
      "\tMUL\n" + 
      "\tPUSH\t" + pt1 + "\n" + 
      "\tLOAD\n" +
      "\tSWAP\n" + 
      "\tSUB\n" +
      "\tPUSH\t" + pt3 + "\n" +
      "\tSWAP\n" + 
      "\tSTORE\n" +
      // if result == 0?
      "\tPUSH\t" + pt3 + "\n" + 
      "\tLOAD\n" +
      "\tBEZ\t" + lab2 + "\n" +
      // store in pt1
      "\tPUSH\t" + pt1 + "\n" +
      "\tPUSH\t" + pt2 + "\n" + 
      "\tLOAD\n" +
      "\tSTORE\n" +
      "\tPUSH\t" + pt2 + "\n" + 
      "\tPUSH\t" + pt3 + "\n" + 
      "\tLOAD\n" +
      "\tSTORE\n" +
      "\tPUSH\t" + lab1 + "\n" + 
      "\tGOTO\n" + 
      // fin de l'algorithm
      lab2 + "\tEQU\t*\n" + 
      "\tPUSH\t" + pt2 + "\n" + 
      "\tLOAD\n";
    :}
;
