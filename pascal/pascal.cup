import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }
:}

action code {:
  // attributes & methods seen from actions
  int count = 0;
  int def_var_num_count = 0;
  int call_var_num_count = 0;
  String current_scope = "main";
  String last_scope = current_scope;

  String make_inst(String lab, String op, String arg) {
    return lab + "\t" + op + "\t" + arg + "\n";
  }

  String make_comm(String comment) {
    return ";/ " + comment + "\n";
  }

  String make_label(String n){
    return "@lab_" + n + "_" + count++;
  }

  String make_pointer(String n){
    return "@pt_" + n + "_" + count++;
  }

  String make_var(String n){
    return "@var_" + n + "_" + count++;
  }

  HashMap<String, Boolean> var_map = new HashMap<String, Boolean>();
  HashMap<String, Integer> func_var_num = new HashMap<String, Integer>();
  Stack<String> if_label_stack = new Stack<String>();
  Stack<String> switch_label_stack = new Stack<String>();
  Stack<String> switch_var_stack = new Stack<String>();

:}

terminal TK_SEP, TK_PRINT, TK_PLUS, TK_MINUS, TK_TIMES, TK_DIVIDE, 
  TK_OP, TK_CP, TK_LCOMM, TK_DECL, TK_ASSIGN, TK_IN, TK_IF, TK_ELSE, 
  TK_OCURLY, TK_CCURLY, TK_MOD, TK_UMINUS, TK_WHILE, TK_COMMA, 
  TK_OB, TK_CB, TK_MINR, TK_EMINR, TK_GRTR, TK_EGRTR, TK_EQUAL, 
  TK_DIFF, TK_AND, TK_OR, TK_NOT, TK_EXIT, TK_PROC, TK_CALL, TK_FUNC, 
  TK_RETURN, TK_GLOBAL, TK_ELIF, TK_SWITCH, TK_CASE, TK_REF, TK_DEREF,
  TK_DEFINE;
terminal Integer TK_ICNST;
terminal String TK_IDENT;

non terminal target;
non terminal String program, linst, inst, print, expr, comment, 
  declaration, assignment, lident, lexpr, func, ref, 
  ref_dec, if_elif_else_state, if_elif_state, if_state, 
  else_state, elif_state, switch_state, switch_head, list_case_state,
  case_state, while_state, proc_def, proc_call, func_def, input_dec, 
  lvar, var, input_call;

precedence left TK_MINR, TK_EMINR, TK_GRTR, TK_EGRTR, TK_EQUAL, TK_DIFF;
precedence left TK_PLUS, TK_MINUS;
precedence left TK_TIMES, TK_DIVIDE, TK_MOD;
precedence left TK_AND, TK_OR;
precedence left TK_UMINUS, TK_NOT;
precedence left TK_REF, TK_DEREF;

start with target;

target ::= program:s {: System.out.println(s); :}
;

program ::= 
  linst:l {: RESULT = l + "\tSTOP\n"; :}
;

linst ::= 
  inst:i 
    {: RESULT = i; :}
  | 
  linst:l inst:i 
    {: RESULT = l + i; :}
;

inst  ::= 
  print:i TK_SEP 
    {: RESULT = i; :}
  |
  declaration:i TK_SEP 
    {: RESULT = i; :}
  |
  assignment:i TK_SEP 
    {: RESULT = i; :}
  |
  comment:i 
    {: RESULT = ""; :}
  |
  if_elif_else_state:i
    {:
      String lab_if_fin = if_label_stack.pop();
      RESULT = 
        i +
        make_inst(lab_if_fin, "EQU", "*");
    :}
  |
  switch_state:i
    {: RESULT = i ; :}
  |
  while_state:i
    {: RESULT = i ; :}
  |
  proc_def:i
    {: RESULT = i ; :}
  |
  proc_call:i
    {: RESULT = i ; :}
  |
  func_def:i
    {: RESULT = i ; :}
  |
  TK_DEFINE TK_IDENT:n TK_ICNST:i TK_SEP
    {: 
      Lexer.cnst_map.put(n, i);
      RESULT = ""; 
    :}
  |
  TK_EXIT TK_OP expr:e TK_CP
    {: RESULT = e + "\tSTOP\n"; :}
  |
  TK_RETURN expr:e TK_SEP
    {: 
      RESULT = 
        e + 
        make_inst("", "SWAP", "") + 
        make_inst("", "GOTO", ""); 
    :}
  |
  TK_SEP 
    {: RESULT = ""; :}
;

print ::= 
  TK_PRINT expr:e
    {:
	    String comment = make_comm("print...");
	    RESULT = comment + e + "\tOUT\n";
    :}
;

declaration ::=
  TK_GLOBAL TK_IDENT:v 
    {:
      RESULT = make_inst(v, "DS", "1"); 
    :}
  |
  TK_DECL ref_dec:v TK_ASSIGN expr:e
    {: 
      RESULT =
        make_inst(v,"DS","1") +
        make_inst("", "PUSH", v) +
        e + 
        make_inst("", "STORE", "");
    :}
  |
  TK_DECL ref_dec:v
    {:
      RESULT = make_inst(v, "DS", "1");
    :}
  |
  TK_DECL lident:lv
    {: RESULT =  lv; :}
  |
  TK_DECL TK_TIMES ref_dec:v
    {:
      String new_var = make_var("pointer");
      RESULT = 
        make_inst(v, "DS", "1") +
        make_inst(new_var, "DS", "1") +
        make_inst("", "PUSH", v) +
        make_inst("", "PUSH", new_var) +
        make_inst("", "STORE", "");
    :}
  |
  TK_DECL ref_dec:v TK_OB TK_ICNST:i TK_CB
    {: 
      RESULT = v + "\tDS\t" + i + "\n";
    :}
;

assignment ::=
  ref:v TK_ASSIGN expr:e
    {: 
      RESULT = 
        "\tPUSH\t" + v + "\n" + e + "\tSTORE\n"; :}
  |
  ref:v TK_OB expr:e1 TK_CB TK_ASSIGN expr:e2
    {: 
      RESULT = 
        "\tPUSH\t" + v + "\n" + 
        e1 +
        "\tADD\n" + 
        e2 +
        "\tSTORE\n"; 
    :}
  |
  TK_TIMES ref:p TK_ASSIGN expr:e
    {:
      RESULT = 
        make_inst("", "PUSH", p) +
        make_inst("", "LOAD", "") +
        e +
        make_inst("", "STORE", "");
    :}
  |
  ref:v TK_IN
    {: 
      RESULT = 
        "\tPUSH\t" + v + "\n" + 
        "\tIN\n" + 
        "\tSTORE\n"; 
    :}
;

comment ::=
  TK_LCOMM 
    {: RESULT = ""; :}
;

if_elif_else_state ::=
  if_elif_state:li
    {:
      RESULT = li ;
    :}
  |
  if_elif_state:li1 else_state:li2
    {:
      RESULT = li1 + li2 ;
    :}
;

if_elif_state ::=
  if_state:li
    {:
      RESULT = li ;
    :}
  |
  if_elif_state:li1 elif_state:li2
    {:
      RESULT = li1 + li2 ;
    :}
;

if_state ::=
  TK_IF TK_OP expr:cond TK_CP TK_OCURLY linst:li TK_CCURLY
  {: 
    String lab_if_fin = make_label("fin_if_state");
    if_label_stack.push(lab_if_fin);
    String labfin = make_label("fin_con");
    RESULT = 
    cond +
    make_inst("", "BEZ", labfin) + 
    li + 
    make_inst("", "PUSH", lab_if_fin) +
    make_inst("", "GOTO", "") +
    make_inst(labfin, "EQU", "*");
  :}
;

else_state ::=
  TK_ELSE TK_OCURLY linst:li TK_CCURLY
    {: 
      String lab_if_fin = if_label_stack.peek();
      RESULT = 
        li + 
        make_inst("", "PUSH", lab_if_fin) +
        make_inst("", "GOTO", ""); 
    :}
;

elif_state ::=
  TK_ELIF TK_OP expr:cond TK_CP TK_OCURLY linst:li TK_CCURLY
  {: 
    String labfin = make_label("fin_con");
    String lab_if_fin = if_label_stack.peek();
    RESULT = 
    cond +
    make_inst("", "BEZ", labfin) + 
    li + 
    make_inst("", "PUSH", lab_if_fin) +
    make_inst("", "GOTO", "") +
    labfin + "\tEQU\t*\n"; 
  :}
;

switch_state ::=
  switch_head:sh TK_OCURLY list_case_state:ls TK_CCURLY
    {:
      String lab_switch_fin = switch_label_stack.pop();
      switch_var_stack.pop();
      RESULT = 
        sh +
        ls +
        make_inst(lab_switch_fin, "EQU", "*");
    :}
;

switch_head ::=
  TK_SWITCH TK_OP expr:e TK_CP
    {:
      String lab_switch_fin = make_label("fin_switch_state");
      String var_switch = make_var("switch_var");
      switch_label_stack.push(lab_switch_fin);
      switch_var_stack.push(var_switch);
      RESULT = 
        make_inst(var_switch, "DS", "1") +
        make_inst("", "PUSH", var_switch) +
        e +
        make_inst("", "STORE", "");
    :}
;

list_case_state ::=
  list_case_state:ls case_state:s
    {:
      RESULT = ls + s ;
    :}
  |
  case_state:s
    {:
      RESULT = s ;
    :}
;

case_state ::=
  TK_CASE TK_ICNST:i TK_OCURLY linst:li TK_CCURLY
    {:
      String lab_switch_fin = switch_label_stack.peek();
      String switch_var = switch_var_stack.peek();
      String lab_execute = make_label("case_execute");
      String lab_casefin = make_label("case_fin");
      RESULT = 
        make_inst("", "PUSH", switch_var) +
        make_inst("", "LOAD", "") +
        "" + "\tPUSH\t" + i + "\n" +
        make_inst("", "SUB", "") +
        make_inst("", "BEZ", lab_execute) +
        make_inst("", "PUSH", lab_casefin) +
        make_inst("", "GOTO", "") +
        make_inst(lab_execute, "EQU", "*") +
        li + 
        make_inst("", "PUSH", lab_switch_fin) +
        make_inst("", "GOTO", "") +
        make_inst(lab_casefin, "EQU", "*");
    :}
;

while_state ::=
  TK_WHILE TK_OP expr:cond TK_CP TK_OCURLY linst:li1 TK_CCURLY
    {: 
      String labcond = make_label("fin");
      String labfin = make_label("fin");
      RESULT = 
        labcond + "\tEQU\t*\n" +
        cond + 
        "\tBEZ\t" + labfin + "\n" + 
        li1 + 
        "\tPUSH\t" + labcond + "\n" + 
        "\tGOTO\n" + 
        labfin + "\tEQU\t*\n"; 
    :}
;

proc_def ::=
  TK_PROC func:f input_dec:id TK_OCURLY linst:li TK_CCURLY
    {: 
      String labfin = make_label("fin");
      func_var_num.put(f, def_var_num_count);
      String comment = make_comm("Function: " + f + ", number of variables: " + def_var_num_count);
      def_var_num_count = 0;
      RESULT =
        comment + 
        make_inst("", "PUSH", labfin) + 
        make_inst("", "GOTO", "") + 
        make_inst(f, "EQU", "*") + 
        id +
        li +
        make_inst("", "GOTO", "") + 
        make_inst(labfin, "EQU", "*");
      current_scope = last_scope;
    :}
;

proc_call ::=
  TK_CALL TK_IDENT:f input_call:ic
    {:
      String lab_back = make_label("back_" + f);
      //String prob_name = current_scope + ":" + f;
      String comment = make_comm("Call function: " + f + ", number of variables: " + call_var_num_count);
      if (call_var_num_count == func_var_num.get(f)){
        RESULT = 
          comment + 
          make_inst("", "PUSH", lab_back) +
          ic + 
          make_inst("", "PUSH", f) +
          make_inst("", "GOTO", "") +
          make_inst(lab_back, "EQU", "*");
        call_var_num_count = 0;
      } else {
        RESULT = 
          comment + 
          make_inst("", "STOP", "");
      }      
    :}
;

func_def ::=
  TK_FUNC func:f input_dec:id TK_OCURLY linst:li TK_CCURLY
    {: 
      String labfin = make_label("fin");
      func_var_num.put(f, def_var_num_count);
      String comment = make_comm("Function: " + f + ", number of variables: " + def_var_num_count);
      def_var_num_count = 0;
      RESULT =
        comment + 
        make_inst("", "PUSH", labfin) + 
        make_inst("", "GOTO", "") + 
        make_inst(f, "EQU", "*") + 
        id + 
        li + 
        //make_inst("", "GOTO", "") + // 这里不用加 GOTO 是因为在 return 里面已经加了 GOTO 了，所以函数其实在 li 这里已经回到了原来的调用的位置
        make_inst(labfin, "EQU", "*");
     current_scope = last_scope;
    :}
;

input_dec ::=
  TK_OP lvar:lv TK_CP
    {: RESULT = lv ; :}
  |
  TK_OP TK_CP
    {: RESULT = "" ; :}
;

input_call ::=
  TK_OP lexpr:le TK_CP
    {: RESULT = le ; :}
  |
  TK_OP TK_CP
    {: RESULT = "" ; :}
;

lvar ::=
  lvar:lv TK_COMMA var:v
    {: 
      def_var_num_count += 1;
      RESULT = lv + v ; 
    :}
  |
  var:v
    {: 
      def_var_num_count += 1;
      RESULT = v ; 
    :}
;

var ::= 
  ref_dec:v 
    {:
      RESULT = 
        make_inst(v, "DS", "1") +
        make_inst("", "PUSH", v) +
        make_inst("", "SWAP", "") +
        make_inst("", "STORE", "") ; 
    :}
  |
  TK_TIMES ref_dec:v
    {: 
      RESULT = 
        make_inst(v, "DS", "1") +
        make_inst("", "PUSH", v) +
        make_inst("", "SWAP", "") +
        make_inst("", "STORE", "") ; 
    :}
;

ref_dec ::=
  TK_IDENT:v
    {:
      String var_name = current_scope + ":" + v;
      var_map.put(var_name, true);
      RESULT = var_name;
    :}
;

func ::=
  TK_IDENT:f
    {:
      last_scope = current_scope;
      current_scope = current_scope + ":" + f;
      //RESULT = current_scope;
      RESULT = f;
    :}
;

lexpr ::=
  lexpr:le TK_COMMA expr:e 
    {:
      call_var_num_count += 1; 
      RESULT = e + le; 
    :}
  |
  expr:e 
    {: 
      call_var_num_count += 1;
      RESULT = e; 
    :}
;

lident ::=
  lident:lv TK_COMMA ref_dec:v
    {: 
      RESULT = 
        lv + 
        make_inst(v, "DS", "1"); 
    :}
  |
  ref_dec:v1 TK_COMMA ref_dec:v2
    {:
      RESULT = 
        make_inst(v1, "DS", "1") +
        make_inst(v2, "DS", "1"); 
    :}
;

ref ::=
  TK_IDENT:v
    {:
      String var_name = current_scope + ":" + v;
      if (var_map.containsKey(var_name)){
        RESULT = var_name;
      } else {
        RESULT = v;
      }
    :}
;

expr ::= 
  TK_ICNST:i 
    {: RESULT = "\tPUSH\t" + i + "\n"; :}
  |
  ref:v
    {: 
      RESULT = 
        "\tPUSH\t" + v + "\n" + 
        "\tLOAD\n"; 
    :}
  |
  ref:v TK_OB expr:e TK_CB
    {: 
      RESULT = 
        make_inst("", "PUSH", v) +
        e +
        make_inst("", "ADD", "") +
        make_inst("", "LOAD", "");
    :}
  |
  TK_IDENT:f TK_OP TK_CP
    {: 
      String lab_back = make_label("back_" + f);
      //String func_name = current_scope + ":" + f;
      RESULT = 
        make_inst("", "PUSH", lab_back) +
        make_inst("", "PUSH", f) +
        make_inst("", "GOTO", "") +
        make_inst(lab_back, "EQU", "*");
    :}
  |
  TK_IDENT:f TK_OP lexpr:le TK_CP
    {: 
      String lab_back = make_label("back_" + f);
      String comment = make_comm("Call function: " + f + ", number of variables: " + call_var_num_count);
      //String func_name = current_scope + ":" + f;
      RESULT = 
        comment + 
        make_inst("", "PUSH", lab_back) +
        le +
        make_inst("", "PUSH", f) +
        make_inst("", "GOTO", "") +
        make_inst(lab_back, "EQU", "*");
    :}
  |
  expr:e1 TK_PLUS expr:e2 
    {: RESULT = e1 + e2 + "\tADD\n"; :}
  |
  expr:e1 TK_MINUS expr:e2 
    {: RESULT = e1 + e2 + "\tSUB\n"; :}
  |
  expr:e1 TK_TIMES expr:e2 
    {: RESULT = e1 + e2 + "\tMUL\n"; :}
  |
  expr:e1 TK_DIVIDE expr:e2 
    {: RESULT = e1 + e2 + "\tDIV\n"; :}
  |
  expr:e1 TK_MOD expr:e2 
    {: 
      RESULT = e1 + 
      e2 + 
      "\tDIV\n" + 
      e2 + 
      "\tMUL\n" + 
      e1 + 
      "\tSWAP\n" + 
      "\tSUB\n"; 
    :}
  |
  expr:e1 TK_AND expr:e2 
    {: RESULT = e1 + e2 + "\tAND\n"; :}
  |
  expr:e1 TK_OR expr:e2 
    {: RESULT = e1 + e2 + "\tOR\n"; :}
  |
  TK_NOT expr:e 
    {: 
    RESULT = e + 
    "\tPUSH\t2\n" +
    "\tSUB\n" +
    "\tNOT\n"; 
    :}
  |
  expr:e1 TK_MINR expr:e2 
    {:
      String labegrtr = make_label("minr");
      String labfin = make_label("minr");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBGZ\t" + labegrtr + "\n" +
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBEZ\t" + labegrtr + "\n" +
      "\tPUSH\t1\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labegrtr + "\tEQU\t*\n" +
      "\tPUSH\t0\n" +
      labfin + "\tEQU\t*\n";    
    :}
  |
  expr:e1 TK_EMINR expr:e2 
    {:
      String labgrtr = make_label("eminr");
      String labfin = make_label("eminr");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBGZ\t" + labgrtr + "\n" +
      "\tPUSH\t1\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labgrtr + "\tEQU\t*\n" +
      "\tPUSH\t0\n" +
      labfin + "\tEQU\t*\n";
    :}
  |
  expr:e1 TK_GRTR expr:e2 
    {:
      String labgrtr = make_label("grtr");
      String labfin = make_label("grtr");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBGZ\t" + labgrtr + "\n" +
      "\tPUSH\t0\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labgrtr + "\tEQU\t*\n" +
      "\tPUSH\t1\n" +
      labfin + "\tEQU\t*\n";  
    :}
  |
  expr:e1 TK_EGRTR expr:e2 
    {:
      String labegrtr = make_label("egrtr");
      String labfin = make_label("egrtr");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBGZ\t" + labegrtr + "\n" +
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBEZ\t" + labegrtr + "\n" +
      "\tPUSH\t0\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labegrtr + "\tEQU\t*\n" +
      "\tPUSH\t1\n" +
      labfin + "\tEQU\t*\n";  
    :}
  |
  expr:e1 TK_EQUAL expr:e2 
    {:
      String labequal = make_label("equal");
      String labfin = make_label("equal");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBEZ\t" + labequal + "\n" +
      "\tPUSH\t0\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labequal + "\tEQU\t*\n" +
      "\tPUSH\t1\n" +
      labfin + "\tEQU\t*\n"; 
    :}
  |
  expr:e1 TK_DIFF expr:e2 
    {: 
      String labequal = make_label("diff");
      String labfin = make_label("diff");
      RESULT = 
      e1 + 
      e2 +
      "\tSUB\n" +
      "\tBEZ\t" + labequal + "\n" +
      "\tPUSH\t1\n" +
      "\tPUSH\t" + labfin + "\n" + 
      "\tGOTO\n" + 
      labequal + "\tEQU\t*\n" +
      "\tPUSH\t0\n" +
      labfin + "\tEQU\t*\n";
    :}
  |
  TK_MINUS expr:e
    {: RESULT = "\tPUSH\t 0\n" + e + "\tSUB\n"; :} 
  %prec TK_UMINUS
  |
  TK_AND ref:v
    {: RESULT = make_inst("", "PUSH", v); :}
  %prec TK_REF
  |
  TK_TIMES ref:v
    {: 
      RESULT =
        make_inst("", "PUSH", v) +
        make_inst("", "LOAD", "") +
        make_inst("", "LOAD", "");
    :}
  %prec TK_DEREF
  |
  TK_OP expr:e TK_CP 
    {: RESULT = e; :}
;
