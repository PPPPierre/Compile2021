// $Id: calcul.cup 505 2017-09-25 12:44:47Z coelho $

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }
:}

// definition de map
action code {:
  Map<String, Double> dictionary_variable = new HashMap<String, Double>();
  Map<String, Double> dictionary_cstn = new HashMap<String, Double>();
  dictionary_cstn.put("true", 1.);
  dictionary_cstn.put("false", 0.);
:}

// definition des token
terminal TK_ASSIGN;
terminal TK_PLUS, TK_MINUS, TK_TIMES, TK_DIVIDE, TK_DONE;
termianl TK_AND, TK_OR, TK_NOT, TK_UMINUS, TK_OP, TK_CP;
terminal TK_SIN, TK_COS, TK_TAN, TK_SQRT, TK_LOG, TK_POWER;
terminal Double TK_VAL, TK_PI, TK_E; 
terminal String TK_IDENT, TK_BOOL;

// definition des etats intermediaires
non terminal commandes, commande, assignment;
non terminal Double expression, exprbool;

// associativite et priorite des operateurs
// order of the priorite : bottom - highest, top - lowest
precedence left TK_PLUS, TK_MINUS; 
precedence left TK_TIMES, TK_DIVIDE;
precedence left TK_AND, TK_OR;
precedence left TK_NOT;
precedence left TK_UMINUS, TK_OP, TK_CP;
precedence left TK_POWER;
precedence left TK_SIN, TK_COS, TK_TAN, TK_SQRT, TK_LOG;

// objectif
start with commandes;

commandes ::=
    commande
  | commandes commande
;

commande ::=
      expression:e // expression seule, affichage
	{: System.out.println("# " + e); :}
    TK_DONE
  |
      exprbool:e // expression seule, affichage
	{:
      if (e == 0){
          System.out.println("# false");
      }else{
          System.out.println("# true");
      } 
  :}
    TK_DONE
  |
      assignment // assignement of variables
    TK_DONE
;

expression ::=
      expression:e1 TK_PLUS expression:e2   // effectue l'addition
	{: RESULT = e1 + e2 ; :}
  | 
      expression:e1 TK_MINUS expression:e2  // effectue la soustraction
	{: RESULT = e1 - e2 ; :}
  | 
      expression:e1 TK_TIMES expression:e2  // effectue la multiplication
	{: RESULT = e1 * e2 ; :}
  | 
      expression:e1 TK_DIVIDE expression:e2 // effectue la division
	{: RESULT = e1 / e2 ; :}
  | 
      expression:e1 TK_POWER expression:e2  // effectue la division
	{: RESULT = Math.pow(e1, e2) ; :}
  | 
      TK_MINUS expression:e                 // effectue l'inversion
	{: RESULT = 0 - e ; :}
  %prec TK_UMINUS
  | 
      TK_OP expression:e TK_CP              // effectue les parentheses
	{: RESULT = e ; :}
  |
      TK_SIN TK_OP expression:e TK_CP       // effectue la fonction sinus
  {: RESULT =  Math.sin(e); :}
  |
      TK_COS TK_OP expression:e TK_CP       // effectue la fonction cosinus
  {: RESULT =  Math.cos(e); :}
  |
      TK_TAN TK_OP expression:e TK_CP       // effectue la fonction tangent
  {: RESULT =  Math.tan(e); :}
  |
      TK_SQRT TK_OP expression:e TK_CP      // effectue la fonction racine
  {: RESULT =  Math.sqrt(e); :}
  |
      TK_LOG TK_OP expression:e TK_CP       // effectue la fonction log
  {: RESULT =  Math.log(e); :}
  | 
      TK_VAL:v                              // valeur
	{: RESULT = v; :}
  | 
      TK_PI:v                               // valeur de pi
	{: RESULT = Math.PI; :}
  | 
      TK_E:v                                // valeur de e
	{: RESULT = Math.E; :}
  |   
      TK_IDENT:k
  {: RESULT = dictionary_variable.get(k); :}
  |    
      YK_BOOL:k
  {: RESULT = dictionary_cstn.get(k); :}
;

exprbool ::=
      exprbool:e1 TK_AND exprbool:e2   // effectue l'operation et
	{: 
      if (e1*e2 == 0){
        RESULT = 0;
      }else{
        RESULT = 1;
      }
  :}
  | 
      exprbool:e1 TK_OR exprbool:e2  // effectue l'operiation ou
	{: 
      if (e1 + e2 == 0){
        RESULT = 0;
      }else{
        RESULT = 1;
      }
  :}
  | 
      TK_NOT exprbool:e  // effectue l'operation non
	{:
      if (e == 0){
        RESULT = 1;
      }else{
        RESULT = 0;
      }
  :}
;

assignment ::=
      TK_IDENT:v1 TK_ASSIGN expression:e1
  {: dictionary_variable.put(v1, e1); :} 
;